
Polydata object to handle on-GPU buffer management
 - boundsGet
 - whole-object color

Specialized window for AntTweakBar parameters

Specialized window just for displaying a 2D RGB image

create a "3D scene" object:
 - viewer should take scene as input
 - background color, or background gradient (how to implement this?)
 - all polydata to render
 - ability to reset camera to see whatever's in the scene

how should things like depth-cueing be handled?
 - is it a property of the camera, or the viewer, or the scene?
 - its needed in the fragment shader, but controlled by the Viewer (right?)

where should information about rendering speed (or framerates) be
measured and organized?

Things from Deft to recreate (starting with most important)
 - basic isocontouring program (reorganize Roman's code for this)
 - Volume, as container for a gageContext
 - Colormapping
 - Triplane
 - TensorGlyph

------- Viewer ----------

verify that things still work reasonably if the geometry is 100 times bigger

with up fix, make it harder to get from-at aligned with up

limit results of depthscale so that you don't get near z-fighting

viewer capture/dump to image
https://www.opengl.org/discussion_boards/showthread.php/177931-glReadPixels-fails-to-read-the-content-of-the-color-buffer
https://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml
https://www.opengl.org/wiki/Framebuffer_Object

generating hest options

interpreting hest options

how can use "glfwWindowHint(GLFW_SAMPLES, N);"?  Note that it has to be set at
window-creation time, not adjusted after the fact ...
